{"version":3,"file":"static/js/763.6b21ebe1.chunk.js","mappings":"mMAOA,MAsBA,EAtBuBA,IAAqB,IAApB,WAAEC,GAAYD,EACpC,OACEE,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,GAAI,WAAWH,EAAWI,KAAMC,UAAU,kBAAiBC,SAAA,EAC/DC,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CACPC,OAAQ,IACRC,OAAQ,IACRC,aACEJ,EAAAA,EAAAA,KAACK,EAAAA,EAAc,CACbC,KAAK,+BACLC,MAAO,IACPL,OAAQ,IACRM,MAAO,IAEVT,UAEDC,EAAAA,EAAAA,KAAA,OAAKS,IAAKhB,EAAWiB,MAAOC,IAAK,qBAAqBlB,EAAWmB,OAAQd,UAAU,qBAErFE,EAAAA,EAAAA,KAAA,MAAIF,UAAU,kBAAiBC,SAAEN,EAAWmB,SACvC,EC0DX,EA1EsBC,KACpB,MAAMC,EAJC,IAAIC,iBAAgBC,EAAAA,EAAAA,MAAcC,QAKnCC,EAAaJ,EAAMK,IAAI,MAAQ,GAC/BC,EAAiBN,EAAMK,IAAI,aAAe,IAEzCE,EAASC,IAAcC,EAAAA,EAAAA,UAAS,KAChCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,IAyCnC,OAvCAK,EAAAA,EAAAA,YAAU,KACmBC,WACzB,IAEE,MAAMC,EAAM,IAAIC,IAAI,gDAEhBb,GACFY,EAAIE,aAAaC,OAAO,IAAKf,GAG3BE,GACFU,EAAIE,aAAaC,OAAO,WAAYb,GAGtC,MAAMc,QAAiBC,MAAML,EAAK,CAChCM,OAAQ,MACRC,QAAS,CACP,eAAgB,sBAKpB,IAAKH,EAASI,GACZ,MAAM,IAAIC,MAAM,uBAAuBL,EAASM,UAGlD,MAAMC,QAAaP,EAASQ,OAC5BpB,EAAWmB,EACb,CAAE,MAAOE,GACPC,QAAQlB,MAAM,iCAAkCiB,GAChDhB,EAAS,uDACX,CAAC,QACCF,GAAW,EACb,GAGFoB,EAAoB,GACnB,CAAC3B,EAAYE,KAGdpB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAqBC,UAClCL,EAAAA,EAAAA,MAAA,OAAKI,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iCACHyB,GACCxB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBAAmBC,UAChCC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,6BAEH2B,GACF1B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,EAAAA,KAAA,KAAAD,SAAI2B,MAEJL,EAAQyB,OAAS,GACnB9C,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAC1BsB,EAAQ0B,KAAItD,IACXO,EAAAA,EAAAA,KAACgD,EAAc,CAAqBvD,WAAYA,GAA3BA,EAAWI,SAIpCG,EAAAA,EAAAA,KAAA,KAAAD,SAAG,qEAGH,C","sources":["components/InfluencerCard.js","pages/SearchResults.js"],"sourcesContent":["// src/components/InfluencerCard.jsx\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport LazyLoad from 'react-lazyload';\r\nimport { BlurhashCanvas } from \"react-blurhash\";\r\nimport '../styles/influencerCard.css';\r\n\r\nconst InfluencerCard = ({ influencer }) => {\r\n  return (\r\n    <Link to={`/perfil/${influencer.id}`} className=\"influencer-card\">\r\n      <LazyLoad \r\n        height={200} \r\n        offset={100} \r\n        placeholder={\r\n          <BlurhashCanvas \r\n            hash=\"LEHV6nWB2yk8pyo0adR*.7kCMdnj\" \r\n            width={200} \r\n            height={300} \r\n            punch={1} \r\n          />\r\n        }\r\n      >\r\n        <img src={influencer.image} alt={`Foto de perfil de ${influencer.name}`} className=\"profile-image\" />\r\n      </LazyLoad>\r\n      <h3 className=\"influencer-name\">{influencer.name}</h3>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default InfluencerCard;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport InfluencerCard from '../components/InfluencerCard';\r\nimport '../styles/searchResults.css';\r\n\r\nconst useQuery = () => {\r\n  return new URLSearchParams(useLocation().search);\r\n};\r\n\r\nconst SearchResults = () => {\r\n  const query = useQuery();\r\n  const searchTerm = query.get('q') || ''; // El término de búsqueda para el nombre de la chica\r\n  const locationFilter = query.get('location') || ''; // El filtro del municipio (usando 'location')\r\n\r\n  const [results, setResults] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchSearchResults = async () => {\r\n      try {\r\n        // Construir la URL para la consulta\r\n        const url = new URL('http://localhost:5000/api/influencers/search');\r\n        \r\n        if (searchTerm) {\r\n          url.searchParams.append('q', searchTerm); // Añade el parámetro 'q' si está presente\r\n        }\r\n\r\n        if (locationFilter) {\r\n          url.searchParams.append('location', locationFilter); // Añade el parámetro 'location' si está presente\r\n        }\r\n\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            // 'Authorization': `Bearer ${localStorage.getItem('token')}` // Descomentar si se requiere autenticación\r\n          }\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Error HTTP! estado: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        setResults(data);\r\n      } catch (err) {\r\n        console.error(\"Error fetching search results:\", err);\r\n        setError('No se pudieron cargar los resultados de búsqueda.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchSearchResults();\r\n  }, [searchTerm, locationFilter]);\r\n\r\n  return (\r\n    <div className=\"search-results-page\">\r\n      <div className=\"search-results-container\">\r\n        <h2>Resultados de la Búsqueda</h2>\r\n        {loading ? (\r\n          <div className=\"loading-container\">\r\n            <p>Cargando resultados...</p>\r\n          </div>\r\n        ) : error ? (\r\n          <div className=\"error-container\">\r\n            <p>{error}</p>\r\n          </div>\r\n        ) : results.length > 0 ? (\r\n          <div className=\"results-grid\">\r\n            {results.map(influencer => (\r\n              <InfluencerCard key={influencer.id} influencer={influencer} />\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p>No se encontraron perfiles que coincidan con tu búsqueda.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResults;\r\n"],"names":["_ref","influencer","_jsxs","Link","to","id","className","children","_jsx","LazyLoad","height","offset","placeholder","BlurhashCanvas","hash","width","punch","src","image","alt","name","SearchResults","query","URLSearchParams","useLocation","search","searchTerm","get","locationFilter","results","setResults","useState","loading","setLoading","error","setError","useEffect","async","url","URL","searchParams","append","response","fetch","method","headers","ok","Error","status","data","json","err","console","fetchSearchResults","length","map","InfluencerCard"],"sourceRoot":""}